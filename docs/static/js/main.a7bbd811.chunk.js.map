{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifRead.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGrifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifRead","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yLAmCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAqCC,mBAAS,IAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KAgBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCF,EAFlC,+DAGDG,MAAMD,GAHL,cAGdE,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,UAAUX,QAVd,kBAcbK,GAda,4CAAH,sDCYNO,EAVK,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOF,EAAS,EAATA,IAE9B,OACI,sBAAKM,UAAU,yDAAf,UACI,qBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,4BAAIA,QCkBDO,EArBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEf,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAW,WACPvB,EAAUC,GACLuB,MAAM,SAAAC,GACHH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAEzC,IACIC,EDXyBK,CAAczB,GAAlCY,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QACpB,OACI,qCACI,oBAAIJ,UAAU,oDAAd,SAAoEf,IAClEmB,EAAU,mBAAGJ,UAAU,mCAAb,qBAA8D,KAC1E,qBAAKA,UAAU,WAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aES3BgB,EApBM,WACjB,MAAoCxC,mBAAS,CAAC,aAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KACA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ0C,EAAWnB,KAAK,SAAAR,GAAQ,OAChB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCR1C4B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a7bbd811.chunk.js","sourcesContent":["import React, { useState }from 'react'\nimport PropTypes from 'prop-types';\nconst AddCategory = ({setCategories}) => {\n\n    const [ inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cat => [inputValue, ...cat]);\n            setInputValue('');\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGrifs = async (category) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=DVBiQhzdj5p8GHLd31BTwo61gWHT4Toj`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n       return {\n           id: img.id,\n           title: img.title,\n           img: img.images?.downsized.url,\n       } \n    });\n    \n    return gifs;\n};","import React from 'react'\n\nconst GifGridItem = ({ id, title, img}) => {\n\n    return (\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\n            <img src={img} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifRead = ( {category} ) => {\n\n    const {data:images, loading} =  useFetchGifs( category );\n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce animate__fadeIn\">{ category }</h3>\n            { loading ? <p className=\"animate__animated animate__flash\">Loading</p> : null}\n            <div className=\"cardRead\">\n                    {\n                        images.map( img => (\n                            <GifGridItem \n                                key={ img.id } \n                                { ...img }\n                            />)\n                        )\n                    }\n            </div>\n        </>\n    )\n}\n\nexport default GifRead\n","import { useState, useEffect } from \"react\"\nimport { getGrifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGrifs( category )\n            .then( imgs => {\n                setState({ data: imgs, loading: false });\n            })\n    }, [ ] )\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifRead from './components/GifRead';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['OnePunch']);\n    return (\n        <>\n            <h2>GifExpertApp</h2>  \n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => ( \n                            <GifRead key={category} category={category}/>\n                        )\n                    )\n                }\n            </ol>\n            \n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}